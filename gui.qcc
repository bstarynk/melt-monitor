/// file gui.qcc for the Qt GUI  -*- C++ -*-

/**   Copyright (C)  2017  Basile Starynkevitch and later the FSF
    MONIMELT is a monitor for MELT - see http://gcc-melt.org/
    This file is part of GCC.

    GCC is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3, or (at your option)
    any later version.

    GCC is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with GCC; see the file COPYING3.   If not see
    <http://www.gnu.org/licenses/>.
**/

#include "meltmoni.hh"


#include <QtWidgets>
#include <QMainWindow>

class MomCentralFrame;

class MomMainWindow : public QMainWindow
{
  Q_OBJECT
public:
  MomMainWindow();
  ~MomMainWindow();
private slots:
  void do_exit();
  void do_quit();
  void do_dump();
  void do_save();
  void do_new_win();
  void do_show();
private:
  static constexpr int  _dump_delay_ms = 2500;
  static constexpr int _parse_error_delay_ms = 3300;
  MomCentralFrame* _frame;
  void createActions();
  void show_object(MomObject*pob);
public:
  void scan_gc(MomGC*);
};				// end MomMainWindow

class MomTextDocument;

class MomTextDocument : public QTextDocument
{
  Q_OBJECT
  std::map<MomObject*,QTextFrame*,MomObjNameLess> _shownobmap;
  std::unordered_map<QTextFrame*,MomObject*> _shownframemap;
  QTextFrameFormat _obframeformat;
public slots:
  void removed_object_frame(QTextFrame*);
public:
  MomTextDocument(QObject* parent=nullptr);
  ~MomTextDocument();
  void insert_objref_at_cursor(MomObject*pob, QTextCursor &curs);
  QTextFrame*find_shown_object_frame (MomObject*ob);
  QTextFrame*make_shown_object_frame (MomObject*ob);
  void scan_gc(MomGC*gc);
};				// end MomTextDocument

class MomTextBrowser : public QTextBrowser
{
  Q_OBJECT
public:
  MomTextBrowser(MomTextDocument*doc, QWidget*parent=nullptr);
  ~MomTextBrowser();
private:
  static QString _stylestr_;
  static constexpr const char _stylepath_[]= "browsermom.css";
};				// end class MomTextBrowser

class MomCommandText : public QTextEdit
{
  Q_OBJECT
public:
  MomCommandText(QWidget*parent = nullptr);
  ~MomCommandText();
};				// end class MomCommandText

class MomCentralFrame : public QFrame
{
  Q_OBJECT
public:
  MomCentralFrame(QWidget*par=nullptr);
  ~MomCentralFrame();
private:
  QVBoxLayout _vbox;
  QSplitter _splitter;
  MomTextDocument _doc;
  MomTextBrowser _firstbrowser;
  MomTextBrowser _secondbrowser;
  MomCommandText _cmdtext;
public:
  MomTextDocument* doc()
  {
    return &_doc;
  };
  void scan_gc(MomGC*);
};				// end MomCentralFrame


class MomGuiParser final : public MomParser
{
  MomMainWindow* _window;
public:
  MomGuiParser(std::istringstream&ins, MomMainWindow*win) : MomParser(ins), _window(win) {};
  ~MomGuiParser();
  virtual MomObject* fetch_named_object(const std::string&);
  virtual MomValue chunk_name(const std::string&);
  virtual MomValue chunk_id(MomIdent);
  virtual MomValue chunk_value(const MomValue);
  virtual MomValue chunk_dollarobj(MomObject*);
  virtual MomValue chunk_value(const std::vector<MomValue>&);
}; // end class MomGuiParser

std::set<MomMainWindow*> mom_windows_set;
std::mutex mom_windows_mtx;

MomTextDocument::MomTextDocument(QObject* parent)
  : QTextDocument (parent), _shownobmap(), _obframeformat()
{
  _obframeformat.setBorder(1.5);
  _obframeformat.setBorderStyle(QTextFrameFormat::BorderStyle_Dashed);
  auto obbrush = _obframeformat.borderBrush();
  obbrush.setColor(Qt::darkBlue);
} // end MomTextDocument::MomTextDocument

MomTextDocument::~MomTextDocument()
{
} // end MomTextDocument::~MomTextDocument


QTextFrame*
MomTextDocument::find_shown_object_frame (MomObject*ob)
{
  if (ob==nullptr) return nullptr;
  auto it = _shownobmap.find(ob);
  if (it != _shownobmap.end())
    return it->second;
  return nullptr;
} // end MomTextDocument::find_shown_object_frame


QTextFrame*
MomTextDocument::make_shown_object_frame(MomObject*pob)
{
  MOM_ASSERT(pob != nullptr && pob->vkind() == MomKind::TagObjectK,
             "MomTextDocument::make_shown_object_frame bad pob");
  QTextFrame* fram = nullptr;
  auto itob = _shownobmap.find(pob);
  if (itob != _shownobmap.end())
    fram = itob->second;
  MOM_DEBUGLOG(qgui, "MomTextDocument::make_shown_object_frame pob=" << pob << " fram=" << fram);
  if (fram)
    {
      auto subframlist = fram->childFrames();
      for (QTextFrame* subfram : subframlist)
        subfram->deleteLater();
    }
  else
    {
      auto itprevob = _shownobmap.lower_bound(pob);
      if (itprevob != _shownobmap.end())
        {
          MomObject*prevob = itprevob->first;
          QTextFrame*prevfram = itprevob->second;
          MOM_DEBUGLOG(qgui, "MomTextDocument::make_shown_object_frame pob=" << pob
                       << " prevob=" << prevob << " prevfram=" << prevfram);
          QTextCursor prevcurs = prevfram->lastCursorPosition();
          MOM_DEBUGLOG(qgui, "MomTextDocument::make_shown_object_frame pob=" << pob
                       << " insert before prevob=" << prevob
                       << " prevcurs.pos=" << prevcurs.position());
          prevcurs.insertText("\n");
          fram = prevcurs.insertFrame(_obframeformat);
        }
      else
        {
          QTextCursor curs(this);
          fram = curs.insertFrame(_obframeformat);;
          MOM_DEBUGLOG(qgui, "MomTextDocument::make_shown_object_frame pob=" << pob
                       << " insert at start pob=" << pob);
          curs.insertText("\n");
        }
      MOM_DEBUGLOG(qgui, "MomTextDocument::make_shown_object_frame pob=" << pob
		   << " new fram=" << fram);
      _shownobmap.insert({pob,fram});
      _shownframemap.insert({fram,pob});
      QObject::connect(fram, SIGNAL(destroyed()),
		       this, SLOT(removed_object_frame));
      std::string obnamstr;
      std::string obidstr = pob->id().to_string();
      {
        std::shared_lock<std::shared_mutex> lk(pob->get_shared_mutex());
        obnamstr = mom_get_unsync_string_name(const_cast<MomObject*>(pob));
      }
      {
        std::ostringstream outs;
        if (!obnamstr.empty())
          outs << "<p class='namedtitle_cl'>"
               << "&#8280;" // U+2058 FOUR DOT PUNCTUATION ⁘
               << " " << obnamstr
               << " <tt class='namedid_cl'>" << obidstr << "</tt>"
               << "</p>\n";
        else
          outs << "<p class='anontitle_cl'>"
               << "&#8278;" // U+2056 THREE DOT PUNCTUATION ⁖
               << " " << obidstr
               << "</p>\n";
        fram->firstCursorPosition().insertHtml(QString(outs.str().c_str()));
	MOM_DEBUGLOG(qgui, "MomTextDocument::make_shown_object_frame pob=" << pob
		     << " html:" << MomShowString(outs.str()));
      }
      MOM_DEBUGLOG(qgui, "MomTextDocument::make_shown_object_frame pob=" << pob << " new fram=" << fram);
    } // when new frame
} // end MomTextDocument::make_shown_object_frame

void
MomTextDocument::insert_objref_at_cursor(MomObject*pob, QTextCursor &curs)
{
  MOM_DEBUGLOG(qgui, "MomTextDocument::insert_objref_at_cursor start pob=" << pob
               << " curs.pos=" << curs.position());
} // end MomTextDocument::insert_objref_at_cursor


void
MomTextDocument::removed_object_frame(QTextFrame*fr)
{
  MOM_DEBUGLOG(qgui, "MomTextDocument::removed_object_frame fr=" << fr);
  auto itfr = _shownframemap.find(fr);
  MOM_ASSERT(itfr != _shownframemap.end(), "MomTextDocument::removed_object_frame invalid frame " << fr);
  MomObject*pob = itfr->second;
  MOM_ASSERT(pob != nullptr, "MomTextDocument::removed_object_frame corrupted frame " << fr);
  MOM_DEBUGLOG(qgui,"MomTextDocument::removed_object_frame fr=" << fr << " pob=" << pob);
  auto itob = _shownobmap.find(pob);
  MOM_ASSERT(itob != _shownobmap.end(),
             "MomTextDocument::removed_object_frame corruption: pob=" << pob << " fr=" << fr);
  _shownframemap.erase(itfr);
  _shownobmap.erase(itob);
} // end MomTextDocument::removed_object_frame

void
MomTextDocument::scan_gc(MomGC*gc)
{
  {
    for (auto it: _shownobmap)
      it.first->scan_gc(gc);
  }
} // end MomTextDocument::scan_gc


MomCommandText::MomCommandText(QWidget*parent): QTextEdit(parent)
{
} // end MomCommandText::MomCommandText

MomCommandText::~MomCommandText()
{
} // end MomCommandText::~MomCommandText

MomTextBrowser::MomTextBrowser(MomTextDocument*doc, QWidget*parent)
  : QTextBrowser(parent)
{
  if (_stylestr_.isEmpty())
    {
      QFile filstyl(_stylepath_);
      if (!filstyl.open(QIODevice::ReadOnly))
        MOM_FATAPRINTF("MomTextBrowser failed to open %s - %m", _stylepath_);
      _stylestr_ = filstyl.readAll();
      MOM_ASSERT(!_stylestr_.isEmpty(), "_stylestr_ still empty");
    }
  setDocument(doc);
  doc->setDefaultStyleSheet(_stylestr_);
} // end MomTextBrowser::MomTextBrowser

MomTextBrowser::~MomTextBrowser()
{
} // end MomTextBrowser::~MomTextBrowser

QString MomTextBrowser::_stylestr_;

MomCentralFrame::MomCentralFrame(QWidget*par)
  : QFrame(par),
    _vbox(),
    _splitter(),
    _doc(),
    _firstbrowser(&_doc,this),
    _secondbrowser(&_doc,this),
    _cmdtext(this)
{
  MOM_DEBUGLOG(qgui, "MomCentralFrame this=" << this
               << " of doc default style " << _doc.defaultStyleSheet().toStdString());
  setLayout(&_vbox);
  _vbox.addWidget(&_splitter);
  _splitter.setOrientation(Qt::Vertical);
  _splitter.addWidget(&_firstbrowser);
  _splitter.addWidget(&_secondbrowser);
  _splitter.addWidget(&_cmdtext);
  _firstbrowser.show();
  _secondbrowser.show();
  _cmdtext.show();
  _splitter.show();
} // end MomCentralFrame::MomCentralFrame


MomCentralFrame::~MomCentralFrame()
{
} // end MomCentralFrame::~MomCentralFrame

void
MomCentralFrame::scan_gc(MomGC*gc)
{
  _doc.scan_gc(gc);
} // end MomCentralFrame::scan_gc


void
MomMainWindow::scan_gc(MomGC*gc)
{
  if (_frame)
    _frame->scan_gc(gc);
} // end MomMainWindow::scan_gc

void
MomMainWindow::do_exit(void)
{
  MOM_DEBUGLOG(qgui, "MomMainWindow::do_exit");
} // end MomMainWindow::do_exit

void
MomMainWindow::do_quit(void)
{
  MOM_DEBUGLOG(qgui, "MomMainWindow::do_quit");
  for(;;)
    {
      auto quitq = QMessageBox::question(this,"Really Quit?","quit <i>without</i> saving state ?");
      MOM_DEBUGLOG(qgui, "MomMainWindow::do_quit quitq=" << quitq);
      if (quitq == QMessageBox::Ok || quitq == QMessageBox::Yes)
        {
          mom_dump_dir = nullptr;
          QApplication::quit();
          MOM_DEBUGLOG(qgui, "MomMainWindow::do_quit quitting");
          break;
        }
      else if (quitq == QMessageBox::Cancel || quitq == QMessageBox::No)
        {
          MOM_DEBUGLOG(qgui, "MomMainWindow::do_quit cancelling");
          break;
        }
    };
  MOM_DEBUGLOG(qgui, "MomMainWindow::do_quit ending");
} // end of MomMainWindow::do_quit

void
MomMainWindow::do_dump(void)
{
  MOM_DEBUGLOG(qgui, "MomMainWindow::do_dump");
  long nbo = mom_dump_in_directory(mom_dump_dir);
  char buf[100];
  memset(buf, 0, sizeof(buf));
  snprintf(buf, sizeof(buf), "dumped %ld objects in %s", nbo, mom_dump_dir);
  auto sb = statusBar();
  sb->showMessage(buf, _dump_delay_ms);
} // end of MomMainWindow::do_dump

void
MomMainWindow::do_save(void)
{
  MOM_DEBUGLOG(qgui, "MomMainWindow::do_save start");
  QFileDialog fdial(this,"Dump state to...");
  fdial.setFileMode(QFileDialog::DirectoryOnly);
  bool again = false;
  do
    {
      again = false;
      int rt = fdial.exec();
      MOM_DEBUGLOG(qgui, "MomMainWindow::do_save rt=" << rt);
      if (rt == QDialog::Accepted)
        {
          auto dirlist = fdial.selectedFiles();
          if (dirlist.length() == 1)
            {
              std::string dirp = dirlist.first().toStdString();
              MOM_DEBUGLOG(qgui, "MomMainWindow::do_save dirp=" << dirp);
              long nbo = mom_dump_in_directory(dirp.c_str());
              char buf[100];
              memset(buf, 0, sizeof(buf));
              snprintf(buf, sizeof(buf),
                       "dumped %ld objects in %s", nbo, dirp.c_str());
              auto sb = statusBar();
              sb->showMessage(buf, _dump_delay_ms);
            }
          else
            again = true;
        }
      else if (rt == QDialog::Rejected)
        again = false;
      else again = true;
    }
  while(again);
} // end of MomMainWindow::do_save

void
MomMainWindow::do_new_win(void)
{
  MOM_DEBUGLOG(qgui, "MomMainWindow::do_new_win");
  auto nw = new MomMainWindow();
  auto my_x = x();
  auto my_y = y();
  if (my_x > 400)
    my_x -= 10;
  else
    my_x += 10;
  if (my_y > 300)
    my_y -= 10;
  else
    my_y += 10;
  nw->move(my_x, my_y);
  nw->show();
} // end of MomMainWindow::do_new_win


void
MomMainWindow::do_show(void)
{
  MOM_DEBUGLOG(qgui, "MomMainWindow::do_show");
  auto clipb = QApplication::clipboard();
  MOM_ASSERT(clipb != nullptr, "MomMainWindow::do_show no clipboard");
  std::string showstr;
  {
    auto clipbstr = clipb->text(QClipboard::Clipboard).toStdString();
    auto selstr = clipb->text(QClipboard::Selection).toStdString();
    bool ownclip = clipb->ownsClipboard();
    bool ownsel = clipb->ownsSelection();
    MOM_DEBUGLOG(qgui,
                 "MomMainWindow::do_show clipbstr=" << MomShowString(clipbstr)
                 << " selstr=" << MomShowString(selstr)
                 << " ownclip=" << ownclip
                 << " ownsel=" << ownsel);
    if (ownsel && !selstr.empty())
      showstr = selstr;
    else if (ownclip && !clipbstr.empty())
      showstr = clipbstr;
  }
  MOM_DEBUGLOG(qgui, "MomMainWindow::do_show showstr=" << MomShowString(showstr));
  MomObject* pshowob = nullptr;
  bool gotshowob = false;
  if (!showstr.empty())
    {
      std::istringstream instr(showstr);
      MomGuiParser showpars(instr,this);
      showpars.set_name("*show*");
      showpars.next_line();
      try
        {
          pshowob = showpars.parse_objptr(&gotshowob);
          MOM_DEBUGLOG(qgui, "MomMainWindow::do_show pshowob=" << pshowob
                       << "; gotshowob=" << (gotshowob?"true":"false"));
        }
      catch (MomParser::Mom_parse_failure parsfail)
        {
          MOM_DEBUGLOG(qgui, "MomMainWindow::do_show parsfail:" << parsfail.what());
          auto sb = statusBar();
          sb->showMessage(parsfail.what(), _dump_delay_ms);
        }
    }
  MOM_DEBUGLOG(qgui, "MomMainWindow::do_show pshowob=" << pshowob);
  if (pshowob)
    show_object(pshowob);
  else
    {
    }
#warning incomplete MomMainWindow::do_show
} // end MomMainWindow::do_show


void
MomMainWindow::show_object(MomObject*pob)
{
  MOM_ASSERT(pob != nullptr && pob->kindw() == MomKind::TagObjectK,
             "MomMainWindow::show_object bad pob");
  QTextFrame* obfr = _frame->doc()->make_shown_object_frame(pob);
  MOM_WARNLOG("MomMainWindow::show_object unimplemented pob=" << pob);
#warning MomMainWindow::show_object unimplemented
} // end MomMainWindow::show_object


void
MomMainWindow::createActions(void)
{
  auto mb = menuBar();
  (void) statusBar(); // create it
  // the application menu
  auto appmenu = mb->addMenu("App");
  {
    auto exitact = new QAction("e&Xit");
    exitact->setShortcuts(QKeySequence::Close);
    exitact->setStatusTip("dump state then exit");
    connect(exitact, &QAction::triggered, this, &MomMainWindow::do_exit);
    appmenu->addAction(exitact);
  }
  {
    auto quitact = new QAction("&Quit");
    quitact->setShortcuts(QKeySequence::Quit);
    quitact->setStatusTip("quit without dumping");
    connect(quitact, &QAction::triggered, this, &MomMainWindow::do_quit);
    appmenu->addAction(quitact);
  }
  {
    auto dumpact = new QAction("&Dump");
    dumpact->setShortcuts(QKeySequence::Save);
    dumpact->setStatusTip("dump current state and continue");
    connect(dumpact, &QAction::triggered, this, &MomMainWindow::do_dump);
    appmenu->addAction(dumpact);
  }
  {
    auto saveact = new QAction("&Save in...");
    saveact->setShortcuts(QKeySequence::SaveAs);
    saveact->setStatusTip("save current state in some directory");
    connect(saveact, &QAction::triggered, this, &MomMainWindow::do_save);
    appmenu->addAction(saveact);
  }
  {
    auto newact = new QAction("&New Window");
    newact->setShortcuts(QKeySequence::New);
    newact->setStatusTip("open a new window");
    connect(newact, &QAction::triggered, this, &MomMainWindow::do_new_win);
    appmenu->addAction(newact);
  }
  //// the edit menu
  auto editmenu = mb->addMenu("Edit");
  {
    auto copyact = new QAction("&Copy");
    copyact->setShortcuts(QKeySequence::Copy);
    copyact->setStatusTip("copy the selection");
    // connect(copyact, &QAction::triggered, this, &MomMainWindow::do_copy);
    editmenu->addAction(copyact);
  }
  {
    auto pasteact = new QAction("&Paste");
    pasteact->setShortcuts(QKeySequence::Paste);
    pasteact->setStatusTip("paste the selection");
    // connect(pasteact, &QAction::triggered, this, &MomMainWindow::do_paste);
    editmenu->addAction(pasteact);
  }
  //// the object menu
  auto objectmenu = mb->addMenu("Object");
  {
    auto showact = new QAction("&Show");
    showact->setShortcuts(QKeySequence::Open);
    showact->setStatusTip("show some existing object or the selected one");
    connect(showact, &QAction::triggered, this, &MomMainWindow::do_show);
    objectmenu->addAction(showact);
  }
  {
    auto newact = new QAction("&New");
    newact->setShortcuts(QKeySequence::New);
    newact->setStatusTip("new anonymous object");
    // connect(newact, &QAction::triggered, this, &MomMainWindow::do_newobj);
    objectmenu->addAction(newact);
  }
  {
    auto namedact = new QAction("&Make named");
    namedact->setShortcut(Qt::ALT + Qt::Key_M);
    namedact->setStatusTip("make a new named object");
    // connect(namedact, &QAction::triggered, this, &MomMainWindow::do_newnamed);
    objectmenu->addAction(namedact);
  }

} // end MomMainWindow::createActions



MomMainWindow::MomMainWindow(void)
  : QMainWindow()
{
  setWindowTitle(QString("Mom Main Window"));
  setMinimumSize(400,300);
  _frame = new MomCentralFrame(this);
  setCentralWidget(_frame);
  createActions();
  {
    std::lock_guard<std::mutex> gu(mom_windows_mtx);
    mom_windows_set.insert(this);
  }
} // end MomMainWindow::MomMainWindow

MomMainWindow::~MomMainWindow()
{
  {
    std::lock_guard<std::mutex> gu(mom_windows_mtx);
    mom_windows_set.erase(this);
  }
  delete _frame;
} // end MomMainWindow::~MomMainWindow


MomGuiParser::~MomGuiParser()
{
} // end MomGuiParser::~MomGuiParser

MomObject*
MomGuiParser::fetch_named_object(const std::string&str)
{
  auto pob = mom_find_named(str.c_str());
  MOM_DEBUGLOG(parse,"MomGuiParser::fetch_named_object str=" << MomShowString(str)
               << " pob=" << pob);
  return pob;
} // end MomGuiParser::fetch_named_object


MomValue
MomGuiParser::chunk_name(const std::string&str)
{
  auto pob = mom_find_named(str.c_str());
  MOM_DEBUGLOG(parse,"MomGuiParser::chunk_name str=" << MomShowString(str)
               << " pob=" << pob);
  return pob;
} // end MomGuiParser::chunk_name

MomValue
MomGuiParser::chunk_id(MomIdent id)
{
  auto pob = MomObject::find_object_of_id(id);
  MOM_DEBUGLOG(parse,"MomGuiParser::chunk_id id=" << id << " pob=" << pob);
  return pob;
}  // end MomGuiParser::chunk_id

MomValue
MomGuiParser::chunk_value(const MomValue v)
{
  MOM_DEBUGLOG(parse,"MomGuiParser::chunk_value v=" << v);
  return v;
} // end MomGuiParser::chunk_value

MomValue
MomGuiParser::chunk_dollarobj(MomObject*pdobj)
{
  MOM_DEBUGLOG(parse,"MomGuiParser::chunk_dollarobj pdobj=" << pdobj);
  return pdobj;
} // end MomGuiParser::chunk_dollarobj

MomValue
MomGuiParser::chunk_value(const std::vector<MomValue>&vec)
{
  MOM_DEBUGLOG(parse,"MomGuiParser::chunk_value vec/" << vec.size());
  /// we probably should make a node of connective 'chunk'
#warning unimplemented MomGuiParser::chunk_value
} // end MomGuiParser::chunk_value

void mom_execute_gui(int argc, char**argv)
{
  MOM_INFORMPRINTF("executing Qt GUI");
  if (!mom_dump_dir)
    mom_dump_dir = ".";
  QApplication qapp(argc, argv);
  {
    auto win = new MomMainWindow();
    win->show();
  }
  unsigned scanfun =
    MomGC::the_garbcoll.add_scan_function
    ([=](MomGC* thisgc)
  {
    std::lock_guard<std::mutex> gu(mom_windows_mtx);
    for (auto mwin : mom_windows_set)
      mwin->scan_gc(thisgc);
  });
  qapp.exec();
  MomGC::the_garbcoll.remove_scan_handle(scanfun);
  MOM_INFORMPRINTF("ending Qt GUI");
} // end mom_execute_gui

#include "gui.moc.h"
