/// file gui.qcc for the Qt GUI  -*- C++ -*-

/**   Copyright (C)  2017  Basile Starynkevitch and later the FSF
    MONIMELT is a monitor for MELT - see http://gcc-melt.org/
    This file is part of GCC.

    GCC is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3, or (at your option)
    any later version.

    GCC is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with GCC; see the file COPYING3.   If not see
    <http://www.gnu.org/licenses/>.
**/

#include "meltmoni.hh"


#include <QtWidgets>
#include <QMainWindow>

class MomMainWindow : public QMainWindow
{
  Q_OBJECT
public:
  MomMainWindow();
  ~MomMainWindow();
private slots:
  void do_exit();
  void do_quit();
  void do_dump();
  void do_save();
  void do_new();
private:
  void createActions();
};				// end MomMainWindow


std::set<QMainWindow*> mom_windows_set;

void
MomMainWindow::do_exit(void)
{
  MOM_DEBUGLOG(qgui, "MomMainWindow::do_exit");
  QApplication::quit();
} // end MomMainWindow::do_exit

void
MomMainWindow::do_quit(void)
{
  MOM_DEBUGLOG(qgui, "MomMainWindow::do_quit");
  mom_dump_dir = nullptr;
  QApplication::quit();
} // end of MomMainWindow::do_quit

void
MomMainWindow::do_dump(void)
{
  MOM_DEBUGLOG(qgui, "MomMainWindow::do_dump");
  mom_dump_in_directory(mom_dump_dir);
} // end of MomMainWindow::do_dump

void
MomMainWindow::do_save(void)
{
  MOM_DEBUGLOG(qgui, "MomMainWindow::do_save start");
  QFileDialog fdial(this,"Dump state to...");
  fdial.setFileMode(QFileDialog::DirectoryOnly);
  int rt = fdial.exec();
  if (rt == QDialog::Accepted)
    {
      auto dir = fdial.directory();
      std::string dirp = dir.path().toStdString();
      MOM_DEBUGLOG(qgui, "MomMainWindow::do_save dirp=" << dirp);
      mom_dump_in_directory(dirp.c_str());
    }
  MOM_DEBUGLOG(qgui, "MomMainWindow::do_save rt=" << rt);

} // end of MomMainWindow::do_save

void
MomMainWindow::do_new(void)
{
  MOM_DEBUGLOG(qgui, "MomMainWindow::do_new");
  auto nw = new MomMainWindow();
  nw->show();
} // end of MomMainWindow::do_new


void
MomMainWindow::createActions(void)
{
  auto mb = menuBar();
  auto appmenu = mb->addMenu("App");
  {
    auto exitact = new QAction("e&Xit");
    exitact->setShortcuts(QKeySequence::Close);
    exitact->setStatusTip("dump state then exit");
    connect(exitact, &QAction::triggered, this, &MomMainWindow::do_exit);
    appmenu->addAction(exitact);
  }
  {
    auto quitact = new QAction("&Quit");
    quitact->setShortcuts(QKeySequence::Quit);
    quitact->setStatusTip("quit without dumping");
    connect(quitact, &QAction::triggered, this, &MomMainWindow::do_quit);
    appmenu->addAction(quitact);
  }
  {
    auto dumpact = new QAction("&Dump");
    dumpact->setShortcuts(QKeySequence::Save);
    dumpact->setStatusTip("dump current state and continue");
    connect(dumpact, &QAction::triggered, this, &MomMainWindow::do_dump);
    appmenu->addAction(dumpact);
  }
  {
    auto saveact = new QAction("&Save in...");
    saveact->setShortcuts(QKeySequence::SaveAs);
    saveact->setStatusTip("save current state in some directory");
    connect(saveact, &QAction::triggered, this, &MomMainWindow::do_save);
    appmenu->addAction(saveact);
  }
  {
    auto newact = new QAction("&New Window");
    newact->setShortcuts(QKeySequence::New);
    newact->setStatusTip("open a new window");
    connect(newact, &QAction::triggered, this, &MomMainWindow::do_new);
    appmenu->addAction(newact);
  }
} // end MomMainWindow::createActions



MomMainWindow::MomMainWindow(void)
  : QMainWindow()
{
  setWindowTitle(QString("Mom Main Window"));
  setMinimumSize(400,300);
  createActions();
  mom_windows_set.insert(this);
} // end MomMainWindow::MomMainWindow

MomMainWindow::~MomMainWindow()
{
  mom_windows_set.erase(this);
} // end MomMainWindow::~MomMainWindow

void mom_execute_gui(int argc, char**argv)
{
  MOM_INFORMPRINTF("executing Qt GUI");
  if (!mom_dump_dir)
    mom_dump_dir = ".";
  QApplication qapp(argc, argv);
  {
    auto win = new MomMainWindow();
    win->show();
  }
  qapp.exec();
  MOM_INFORMPRINTF("ending Qt GUI");
} // end mom_execute_gui

#include "gui.moc.h"
